diff --git a/data/map/map.json b/data/map/map.json
index 0b57676..9762864 100644
--- a/data/map/map.json
+++ b/data/map/map.json
@@ -1,15 +1,15 @@
 {
 	"proportions":{
-		"width": 100,
-		"height": 100,
+		"width": 3,
+		"height": 3,
 		"levels": 1
 	},
 	"materials":{
 		"a":{
-			"tile": {"constructor":"Tile", "template":"void"}
+			"tile": {"template":"Tile.void"}
 		},
 		"b":{
-			"tile": {"constructor":"Tile", "template":"meadow"}
+			"tile": {"template":"Tile.meadow", "contents":[{"model":"Mob.God"}]}
 		}
 	},
 	"map":{
diff --git a/data/template/belt.json b/data/template/belt.json
deleted file mode 100644
index 96880f5..0000000
--- a/data/template/belt.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-    "name": "belt",
-    "obj":{
-		"constructor": "Item",
-        "keywords": "belt",
-		"display": "a belt",
-		"contents":[
-			{
-				"constructor": "Weapon",
-				"template": "excalibur"
-			}
-		]
-    }
-}
diff --git a/data/template/excalibur.json b/data/template/excalibur.json
deleted file mode 100644
index fdac785..0000000
--- a/data/template/excalibur.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-    "name": "excalibur",
-    "obj":{
-        "constructor": "Weapon",
-        "keywords": "legendary sword excalibur",
-        "display": "The Legendary Sword Excalibur"
-    }
-}
diff --git a/data/template/meadow.json b/data/template/meadow.json
deleted file mode 100644
index b4f0d9e..0000000
--- a/data/template/meadow.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-    "name": "meadow",
-    "obj":{
-        "constructor": "Tile",
-        "keywords": "meadow",
-		"display": "a big beautiful meadow",
-		"description": "It's a big beautiful meadow. What more could you ask for?"
-    }
-}
diff --git a/data/template/rock.json b/data/template/rock.json
deleted file mode 100644
index 7c1c60c..0000000
--- a/data/template/rock.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-    "name": "rock",
-    "obj":{
-        "constructor": "Item",
-        "keywords": "rock",
-        "display": "a rock"
-    }
-}
diff --git a/data/template/void.json b/data/template/void.json
deleted file mode 100644
index 39fb71f..0000000
--- a/data/template/void.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-    "name": "void",
-    "obj":{
-        "constructor": "Tile",
-        "keywords": "void",
-		"display": "In The Void",
-		"description": "It's a big fuckin' empty void."
-    }
-}
diff --git a/locales/en.json b/locales/en.json
index 478fad5..52d602b 100644
--- a/locales/en.json
+++ b/locales/en.json
@@ -98,5 +98,15 @@
 	"> Finishing templates...": "> Finishing templates...",
 	"> Loading channels...": "> Loading channels...",
 	"< Channels loaded!": "< Channels loaded!",
-	"> Loading map...": "> Loading map..."
+	"> Loading map...": "> Loading map...",
+	">> Partially loaded template for '%s'": ">> Partially loaded template for '%s'",
+	">> Loaded full template for '%s'": ">> Loaded full template for '%s'",
+	">> Finished loading template for '%s'": ">> Finished loading template for '%s'",
+	">> Partially loaded template for <%s>": ">> Partially loaded template for <%s>",
+	">> Loaded full template for <%s>": ">> Loaded full template for <%s>",
+	">> Finished loading template for <%s>": ">> Finished loading template for <%s>",
+	"> Loading templates...": "> Loading templates...",
+	">> Loaded template for <%s>": ">> Loaded template for <%s>",
+	"> Loading models...": "> Loading models...",
+	">> Loaded model for <%s>": ">> Loaded model for <%s>"
 }
\ No newline at end of file
diff --git a/src/mud/Template.js b/src/mud/Template.js
index 77f8632..056254d 100644
--- a/src/mud/Template.js
+++ b/src/mud/Template.js
@@ -1,5 +1,5 @@
 // local includes
-var ObjectFactory = require("./factory/ObjectFactory");
+var ObjectFactory = require("./factory/MapObjectFactory");
 
 class Template{
 	constructor(options){
@@ -39,7 +39,6 @@ class Template{
 
 
 Template.prototype.name = null;
-Template.prototype.type = null;
 Template.prototype.obj = null;
 
 module.exports = Template;
diff --git a/src/mud/command/Create.js b/src/mud/command/Create.js
index 00c9e46..b6ae20a 100644
--- a/src/mud/command/Create.js
+++ b/src/mud/command/Create.js
@@ -7,7 +7,7 @@ var CommandSpecificity = require("../CommandSpecificity");
 
 class Create extends Command{
 	exec(mob){
-		var template = TemplateManager.getTemplateByName("rock");
+		var template = TemplateManager.getTemplateByName("Item.rock");
 		var obj = template.spawn();
 		obj.loc = mob;
 		mob.sendLine(_("You created a rock out of nothing. Very cool."));
diff --git a/src/mud/command/Test.js b/src/mud/command/Test.js
index 64881fe..d9fa384 100644
--- a/src/mud/command/Test.js
+++ b/src/mud/command/Test.js
@@ -5,16 +5,10 @@ var _ = require("../../../i18n");
 var Command = require("../Command");
 var CommandSpecificity = require("../CommandSpecificity");
 var TemplateManager = require("../manager/TemplateManager");
-var belt = TemplateManager.getTemplateByName("belt");
 
 class Test extends Command{
 	exec(mob){
-		var b = belt.spawn();
-		b.loc = mob;
-		mob.sendLine(_("You got a belt with something inside it."));
-		for(var obj of b.contents){
-			mob.sendLine(util.format("    %s (%d)", obj.name, obj.id));
-		}
+
 	}
 }
 
diff --git a/src/mud/factory/ObjectFactory.js b/src/mud/factory/ObjectFactory.js
deleted file mode 100644
index d8748f3..0000000
--- a/src/mud/factory/ObjectFactory.js
+++ /dev/null
@@ -1,52 +0,0 @@
-var TemplateManager = require("../manager/TemplateManager");
-var MapObject = require("../map/MapObject");
-var Movable = require("../map/Movable");
-var Mob = require("../map/Mob");
-var Item = require("../map/Item");
-var Equipment = require("../map/Equipment");
-var Weapon = require("../map/Weapon");
-var Tile = require("../map/Tile");
-
-var _constructorNames = {
-	"MapObject": MapObject,
-	"Movable": Movable,
-	"Mob": Mob,
-	"Item": Item,
-	"Equipment": Equipment,
-	"Weapon": Weapon,
-	"Tile": Tile
-}
-
-class ObjectFactory{
-	static getConstructorByName(name){
-		return _constructorNames[name];
-	}
-
-	static loadFromJSON(json){
-		if(json.template){
-			return ObjectFactory.loadFromJSONAsTemplate(json);
-		} if(json.constructor){
-			return ObjectFactory.loadFromJSONAsConstructor(json);
-		}
-	}
-
-	static loadFromJSONAsConstructor(json){
-		var constructor = ObjectFactory.getConstructorByName(json.constructor);
-		if(!constructor) return;
-		var obj = new constructor();
-		obj.__fromJSON(json);
-		return obj;
-	}
-
-	static loadFromJSONAsTemplate(json){
-		var templateName = json.template;
-		var template = TemplateManager.getTemplateByName(templateName);
-		var constructor = ObjectFactory.getConstructorByName(template.obj.constructor.name);
-		if(!constructor) return;
-		var obj = new constructor();
-		obj.__fromJSON(json);
-		return obj;
-	}
-}
-
-module.exports = ObjectFactory;
diff --git a/src/mud/loader/ChannelLoader.js b/src/mud/loader/ChannelLoader.js
index 87b6eea..9a9566e 100644
--- a/src/mud/loader/ChannelLoader.js
+++ b/src/mud/loader/ChannelLoader.js
@@ -21,7 +21,6 @@ module.exports = function(callback){
 			Logger.info(_(">> Loaded channel '%s'", channel.name));
 		}
 
-		Logger.info(_("< Channels loaded!"));
 		callback();
 	});
 };
diff --git a/src/mud/loader/ClassLoader.js b/src/mud/loader/ClassLoader.js
index b67baff..026583f 100644
--- a/src/mud/loader/ClassLoader.js
+++ b/src/mud/loader/ClassLoader.js
@@ -19,7 +19,6 @@ module.exports = function(callback){
 			Logger.info(_(">> Loaded Class '%s'", cLass.name));
 		}
 
-		Logger.info(_("< Classes loaded!"));
 		callback();
 	});
 };
diff --git a/src/mud/loader/CommandLoader.js b/src/mud/loader/CommandLoader.js
index fee7b79..4a50deb 100644
--- a/src/mud/loader/CommandLoader.js
+++ b/src/mud/loader/CommandLoader.js
@@ -18,7 +18,6 @@ module.exports = function(callback){
 			Logger.info(_(">> Loaded command '%s'", command.plain));
 		}
 
-		Logger.info(_("< Commands loaded..."));
 		CommandManager.sortCommandsBySpecificity();
 		callback();
 	});
diff --git a/src/mud/loader/Loader.js b/src/mud/loader/Loader.js
index 2687bf1..0d2984c 100644
--- a/src/mud/loader/Loader.js
+++ b/src/mud/loader/Loader.js
@@ -9,20 +9,19 @@ var ChannelLoader = require("../loader/ChannelLoader");
 var CharacterLoader = require("../loader/CharacterLoader");
 var CommandLoader = require("../loader/CommandLoader");
 var TemplateLoader = require("../loader/TemplateLoader");
+var ModelLoader = require("../loader/ModelLoader");
 var MapLoader = require("../loader/MapLoader");
 
 // full database loader
 module.exports = function(callback){
-	Logger.info(_("> Loading..."));
 
 	// specify loaders in the order they should be run
-	var loaders = [RaceLoader, ClassLoader, TemplateLoader, ChannelLoader, CommandLoader, MapLoader, CharacterLoader];
+	var loaders = [RaceLoader, ClassLoader, TemplateLoader, ModelLoader, ChannelLoader, CommandLoader, MapLoader, CharacterLoader];
 
 	// create a "loader iterator" that propagates callbacks
 	var i = 0;
 	function loadNext(){
 		if(!loaders.length){
-			Logger.info(_("< Loaded!"));
 			callback();
 			return;
 		}
diff --git a/src/mud/loader/MapLoader.js b/src/mud/loader/MapLoader.js
index 287e3a5..7452c9b 100644
--- a/src/mud/loader/MapLoader.js
+++ b/src/mud/loader/MapLoader.js
@@ -4,7 +4,7 @@ var fs = require("fs");
 // local includes
 var _ = require("../../../i18n");
 var Logger = require("../../util/Logger");
-var ObjectFactory = require("../factory/ObjectFactory");
+var ObjectFactory = require("../factory/MapObjectFactory");
 var MapManager = require("../manager/MapManager");
 var Map = require("../map/Map");
 
@@ -25,6 +25,5 @@ module.exports = function(callback){
 		}
 	}
 
-	Logger.info(_("< Loaded map."));
 	callback();
 };
diff --git a/src/mud/loader/RaceLoader.js b/src/mud/loader/RaceLoader.js
index fd225b5..814e521 100644
--- a/src/mud/loader/RaceLoader.js
+++ b/src/mud/loader/RaceLoader.js
@@ -18,8 +18,7 @@ module.exports = function(callback){
 			RaceManager.add(race);
 			Logger.info(_(">> Loaded race '%s'", race.name));
 		}
-
-		Logger.info(_("< Races loaded..."));
+	
 		callback();
 	});
 };
diff --git a/src/mud/loader/TemplateLoader.js b/src/mud/loader/TemplateLoader.js
index be28637..554ea41 100644
--- a/src/mud/loader/TemplateLoader.js
+++ b/src/mud/loader/TemplateLoader.js
@@ -5,49 +5,36 @@ var fs = require("fs");
 require("../../lib/Object");
 var _ = require("../../../i18n");
 var Logger = require("../../util/Logger");
-var ObjectFactory = require("../factory/ObjectFactory");
 var TemplateManager = require("../manager/TemplateManager");
 var Template = require("../Template");
 
-var _tmp = [];
-function preloadTemplates(callback){
-	Logger.info(_("> Preloading templates..."));
-	fs.readdir("./data/template", function(err, files){
+// deep file search
+function deepSearch(directory, fileFun, callback){
+	fs.readdir(directory, function(err, files){
+		var waiting = files.length;
+		function next() { waiting--; if(waiting === 0) callback(); }
 		for(var file of files){
-			var _template = require("../../../data/template/"+file);
-			var template = new Template();
-			if(_template.obj.contents) _tmp[template.uuid] = _template.obj.contents;
-			template.__fromJSON(_template);
-			TemplateManager.add(template);
-			if(_tmp[template.uuid]) Logger.info(_(">> Partially loaded template for <%s> '%s'", template.obj.constructor.name, template.obj.name));
-			else Logger.info(_(">> Loaded full template for <%s> '%s'", template.obj.constructor.name, template.obj.name));
+			var _file = directory+"/"+file;
+			var stats = fs.lstatSync(_file);
+			if(stats.isDirectory()) deepSearch(_file, fileFun, next);
+			else fileFun(_file, next);
 		}
-
-		Logger.info(_("< Templates preloaded!"));
-		callback();
 	});
 }
 
 function loadTemplates(callback){
-	Logger.info(_("> Finishing templates..."));
-	for(var template of TemplateManager.templates){
-		var contents = _tmp[template.uuid];
-		if(!contents) continue;
-		for(var json of contents){
-			var obj = ObjectFactory.loadFromJSON(json);
-			if(obj) obj.loc = template.obj;
-		}
-
-		delete template._contents;
-		Logger.info(_(">> Finished loading template for <%s> '%s'", template.obj.constructor.name, template.obj.name));
-	}
-
-	Logger.info("< Templates finished!");
-	callback();
+	Logger.info(_("> Loading templates..."));
+	deepSearch("./data/template", function(file, next){
+		var f = file.slice("./data/template".length); // cut off relative path from root
+		var _template = require("../../../data/template/"+f);
+		var template = new Template();
+		template.__fromJSON(_template);
+		TemplateManager.add(template);
+		Logger.info(_(">> Loaded template for <%s>", template.name));
+		next();
+	}, callback);
 }
 
 module.exports = function(callback){
-	preloadTemplates(function(){
-		loadTemplates(callback);
-	});
+	loadTemplates(callback);
 };
diff --git a/src/mud/manager/RaceManager.js b/src/mud/manager/RaceManager.js
index 7074db9..c755fda 100644
--- a/src/mud/manager/RaceManager.js
+++ b/src/mud/manager/RaceManager.js
@@ -24,7 +24,7 @@ class RaceManager{
 	 */
 	static getRaceByName(name){
 		for(var race of _races){
-			if(race.display === name) return race;
+			if(race.name === name) return race;
 		}
 	}
 }
diff --git a/src/mud/manager/TemplateManager.js b/src/mud/manager/TemplateManager.js
index 6b63348..31375c6 100644
--- a/src/mud/manager/TemplateManager.js
+++ b/src/mud/manager/TemplateManager.js
@@ -5,10 +5,6 @@ class TemplateManager{
 		return _templates;
 	}
 
-	static set templates(template){
-		_templates = template;
-	}
-
 	static add(template){
 		if(_templates.indexOf(template) != -1) return;
 		_templates.push(template);
diff --git a/src/mud/map/MapObject.js b/src/mud/map/MapObject.js
index 32055d1..23395ed 100644
--- a/src/mud/map/MapObject.js
+++ b/src/mud/map/MapObject.js
@@ -1,5 +1,6 @@
 // local includes
 var TemplateManager = require("../manager/TemplateManager");
+var ModelManager = require("../manager/ModelManager");
 
 /**
  * The base object that can legally inhabit a {@link Map}.
@@ -51,14 +52,26 @@ class MapObject{
 
 	set template(template){
 		if(this._template) return;
+		if(this._model) return;
 		this.__proto__ = template.obj;
 		this._template = template;
 	}
 
+	set model(model){
+		if(this._template) return;
+		if(this._model) return;
+		this.__proto__ = model.obj;
+		this._model = model;
+	}
+
 	get template(){
 		return this._template;
 	}
 
+	get model(){
+		return this._model;
+	}
+
 	// recursive reference between a map object's loc and the loc's contents.
 	// if mapobject A is in mapobject B's contents, mapobject A's loc must be mapobject B.
 	set loc(loc){
@@ -87,12 +100,18 @@ class MapObject{
 			// no loc
 			case "_loc": break;
 
-			// save template ID
+			// save template name
 			case "_template":
 				if(value === null) break;
 				json.template = value.name;
 				break;
 
+			// save mode name
+			case "_model":
+				if(value === null) break;
+				json.model = value.name;
+				break;
+
 			// convert contents list to JSON
 			case "_contents":
 				if(!value.length) return;
@@ -121,6 +140,11 @@ class MapObject{
 				if(template) this.template = template;
 				break;
 
+			case "model":
+				var model = ModelManager.getModelByName(value);
+				if(model) this.model = model;
+				break;
+
 			// load contents elsewhere
 			// since this requires the context of other
 			// descendent map objects, there's no way
@@ -166,8 +190,9 @@ class MapObject{
 	 * @param {MapObject} loc Location to move to.
 	 */
 	move(loc){
-		if(!this.canMove(loc)) return;
+		if(!this.canMove(loc)) return false;
 		this.loc = loc;
+		return true;
 	}
 
 	/**
diff --git a/src/mud/map/Mob.js b/src/mud/map/Mob.js
index 9ea8ad0..b5ba83d 100644
--- a/src/mud/map/Mob.js
+++ b/src/mud/map/Mob.js
@@ -26,6 +26,8 @@ class Mob extends Movable{
 	constructor(options){
 		super(options);
 		this._channels = [];
+		this.race = RaceManager.getRaceByName("human");
+		this.class = ClassManager.getClassByName("warrior");
 
 		if(options){
 			if(options.isCharacter) this.characterData = new CharacterData();
@@ -185,9 +187,9 @@ class Mob extends Movable{
 				if(value instanceof Tile) json.loc = {x:value.x, y:value.y, z:value.z};
 				break;
 
-			case "race": json.race = value.id; break;
-			case "class": json.class = value.id; break;
-			default: Movable.__JSONWrite.call(this, key, value, json); break;
+			case "race": json.race = value.name; break;
+			case "class": json.class = value.name; break;
+			default: super.__JSONWrite(key, value, json); break;
 		}
 	}
 
@@ -197,9 +199,9 @@ class Mob extends Movable{
 				this._loc = value;
 				break;
 
-			case "race": this.race = RaceManager.getRaceByID(value); break;
-			case "class": this.class = ClassManager.getClassByID(value); break;
-			default: Movable.__JSONRead.call(this, key, value); break;
+			case "race": this.race = RaceManager.getRaceByName(value); break;
+			case "class": this.class = ClassManager.getClassByName(value); break;
+			default: super.__JSONRead(key, value); break;
 		}
 	}
 
@@ -313,13 +315,13 @@ Mob.prototype.characterData = null;
  * This mob's race.
  * @type {?Race}
  */
-Mob.prototype.race = new Race();
+Mob.prototype.race = null;
 
 /**
  * This mob's class.
  * @type {?Class}
  */
-Mob.prototype.class = new Class();
+Mob.prototype.class = null;
 
 /**
  * This mob's experience level.
diff --git a/src/mud/map/Movable.js b/src/mud/map/Movable.js
index 5f5739f..9b2d563 100644
--- a/src/mud/map/Movable.js
+++ b/src/mud/map/Movable.js
@@ -47,6 +47,12 @@ class Movable extends MapObject{
 		if(!loc.canEnter(this)) return;
 		return true;
 	}
+
+	step(dir){
+		var tile = this.getStep(dir);
+		if(!tile) return false;
+		return this.move(tile);
+	}
 }
 
 /** @default "movable" */
diff --git a/unit-tests/src/factory/ObjectFactory.js b/unit-tests/src/factory/ObjectFactory.js
deleted file mode 100644
index f6922c0..0000000
--- a/unit-tests/src/factory/ObjectFactory.js
+++ /dev/null
@@ -1,27 +0,0 @@
-// npm includes
-var expect = require("chai").expect;
-
-// local includes
-var TemplateManager = require("../../../src/mud/manager/TemplateManager");
-var ObjectFactory = require("../../../src/mud/factory/ObjectFactory");
-
-describe("ObjectFactory", function(){
-	it("create a MapObject from a Template", function(done){
-		var rock = TemplateManager.getTemplateByName("rock");
-		var instance = rock.spawn();
-		expect(instance.template).is.equal(rock);
-		expect(instance.display).is.equal("a rock");
-		done();
-	});
-
-	it("create a belt from a template containing another object", function(done){
-		var excalibur = TemplateManager.getTemplateByName("excalibur");
-		var belt = TemplateManager.getTemplateByName("belt");
-		var instance = belt.spawn();
-		expect(instance.template).is.equal(belt);
-		var clone = instance.clone();
-		expect(clone.template).is.equal(belt);
-		expect(clone.contents[0].template).is.equal(excalibur);
-		done();
-	});
-});
diff --git a/unit-tests/src/manager/TemplateManager.js b/unit-tests/src/manager/TemplateManager.js
index 96b86ec..556c01b 100644
--- a/unit-tests/src/manager/TemplateManager.js
+++ b/unit-tests/src/manager/TemplateManager.js
@@ -6,7 +6,7 @@ var TemplateManager = require("../../../src/mud/manager/TemplateManager");
 
 describe("TemplateManager", function(){
 	it("I got a rock...", function(done){
-		var template = TemplateManager.getTemplateByName("rock");
+		var template = TemplateManager.getTemplateByName("Item.rock");
 		var instance = template.spawn();
 		expect(instance.template).is.equal(template);
 		done();
